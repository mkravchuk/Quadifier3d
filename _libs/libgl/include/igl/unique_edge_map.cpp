// This file is part of libigl, a simple c++ geometry processing library.
// 
// Copyright (C) 2015 Alec Jacobson <alecjacobson@gmail.com>
// 
// This Source Code Form is subject to the terms of the Mozilla Public License 
// v. 2.0. If a copy of the MPL was not distributed with this file, You can 
// obtain one at http://mozilla.org/MPL/2.0/.
#include "unique_edge_map.h"
#include "all_edges.h"
#include "unique_simplices.h"
#include <cassert>
#include <algorithm>
template <
  typename DerivedF,
  typename DerivedE,
  typename DeriveduE,
  typename DerivedEMAP,
  typename uE2EType>
IGL_INLINE void igl::unique_edge_map(
  const Eigen::PlainObjectBase<DerivedF> & F,
  Eigen::PlainObjectBase<DerivedE> & E,
  Eigen::PlainObjectBase<DeriveduE> & uE,
  Eigen::PlainObjectBase<DerivedEMAP> & EMAP,
  std::vector<std::vector<uE2EType> > & uE2E)
{
  using namespace Eigen;
  using namespace std;
  // All occurances of directed edges
  all_edges(F,E);
  const size_t ne = E.rows();
  // This is 2x faster to create than a map from pairs to lists of edges and 5x
  // faster to access (actually access is probably assympotically faster O(1)
  // vs. O(log m)
  Matrix<typename DerivedEMAP::Scalar,Dynamic,1> IA;
  unique_simplices(E,uE,IA,EMAP);
  uE2E.resize(uE.rows());
  // This does help a little
  for_each(uE2E.begin(),uE2E.end(),[](vector<uE2EType > & v){v.reserve(2);});
  assert((size_t)EMAP.size() == ne);
  for(uE2EType e = 0;e<(uE2EType)ne;e++)
  {
    uE2E[EMAP(e)].push_back(e);
  }
}

#ifdef IGL_STATIC_LIBRARY
// Explicit template specialization
// generated by autoexplicit.sh
template void igl::unique_edge_map<Eigen::MatrixXi, Eigen::MatrixXi, Eigen::MatrixXi, Eigen::MatrixXi, int>(Eigen::PlainObjectBase<Eigen::MatrixXi > const&, Eigen::PlainObjectBase<Eigen::MatrixXi >&, Eigen::PlainObjectBase<Eigen::MatrixXi >&, Eigen::PlainObjectBase<Eigen::MatrixXi >&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&);
// generated by autoexplicit.sh
template void igl::unique_edge_map<Eigen::MatrixXi, Eigen::MatrixXi, Eigen::MatrixXi, Eigen::MatrixXi, unsigned long>(Eigen::PlainObjectBase<Eigen::MatrixXi > const&, Eigen::PlainObjectBase<Eigen::MatrixXi >&, Eigen::PlainObjectBase<Eigen::MatrixXi >&, Eigen::PlainObjectBase<Eigen::MatrixXi >&, std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > >&);
template void igl::unique_edge_map<Eigen::MatrixX3i, Eigen::MatrixX2i, Eigen::MatrixX2i, Eigen::VectorXl, long>(Eigen::PlainObjectBase<Eigen::MatrixX3i > const&, Eigen::PlainObjectBase<Eigen::MatrixX2i >&, Eigen::PlainObjectBase<Eigen::MatrixX2i >&, Eigen::PlainObjectBase<Eigen::VectorXl >&, std::vector<std::vector<long, std::allocator<long> >, std::allocator<std::vector<long, std::allocator<long> > > >&);
template void igl::unique_edge_map<Eigen::MatrixXi, Eigen::MatrixX2i, Eigen::MatrixX2i, Eigen::VectorXl, long>(Eigen::PlainObjectBase<Eigen::MatrixXi > const&, Eigen::PlainObjectBase<Eigen::MatrixX2i >&, Eigen::PlainObjectBase<Eigen::MatrixX2i >&, Eigen::PlainObjectBase<Eigen::VectorXl >&, std::vector<std::vector<long, std::allocator<long> >, std::allocator<std::vector<long, std::allocator<long> > > >&);
template void igl::unique_edge_map<Eigen::MatrixXi, Eigen::MatrixXi, Eigen::MatrixXi, Eigen::VectorXi, int>(Eigen::PlainObjectBase<Eigen::MatrixXi > const&, Eigen::PlainObjectBase<Eigen::MatrixXi >&, Eigen::PlainObjectBase<Eigen::MatrixXi >&, Eigen::PlainObjectBase<Eigen::VectorXi >&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&);
template void igl::unique_edge_map<Eigen::MatrixX3i, Eigen::MatrixXi, Eigen::MatrixXi, Eigen::VectorXi, int>(Eigen::PlainObjectBase<Eigen::MatrixX3i > const&, Eigen::PlainObjectBase<Eigen::MatrixXi >&, Eigen::PlainObjectBase<Eigen::MatrixXi >&, Eigen::PlainObjectBase<Eigen::VectorXi >&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&);
template void igl::unique_edge_map<Eigen::MatrixXd, Eigen::MatrixX2d, Eigen::MatrixX2d, Eigen::VectorXl, long>(Eigen::PlainObjectBase<Eigen::MatrixXd > const&, Eigen::PlainObjectBase<Eigen::MatrixX2d >&, Eigen::PlainObjectBase<Eigen::MatrixX2d >&, Eigen::PlainObjectBase<Eigen::VectorXl >&, std::vector<std::vector<long, std::allocator<long> >, std::allocator<std::vector<long, std::allocator<long> > > >&);
template void igl::unique_edge_map<Eigen::MatrixX3i, Eigen::MatrixXi, Eigen::MatrixX2i, Eigen::VectorXi, int>(Eigen::PlainObjectBase<Eigen::MatrixX3i > const&, Eigen::PlainObjectBase<Eigen::MatrixXi >&, Eigen::PlainObjectBase<Eigen::MatrixX2i >&, Eigen::PlainObjectBase<Eigen::VectorXi >&, std::vector<std::vector<int, std::allocator<int> >, std::allocator<std::vector<int, std::allocator<int> > > >&);
template void igl::unique_edge_map<Eigen::MatrixXi, Eigen::MatrixXi, Eigen::MatrixXi, Eigen::VectorXi, unsigned long>(Eigen::PlainObjectBase<Eigen::MatrixXi > const&, Eigen::PlainObjectBase<Eigen::MatrixXi >&, Eigen::PlainObjectBase<Eigen::MatrixXi >&, Eigen::PlainObjectBase<Eigen::VectorXi >&, std::vector<std::vector<unsigned long, std::allocator<unsigned long> >, std::allocator<std::vector<unsigned long, std::allocator<unsigned long> > > >&);

#ifdef WIN32
template void  igl::unique_edge_map<class Eigen::Matrix<int, -1, 3, EROW, -1, 3>, class Eigen::Matrix<int, -1, 2, EROW, -1, 2>, class Eigen::Matrix<int, -1, 2, EROW, -1, 2>, class Eigen::Matrix<EDITYPE, -1, 1, 0, -1, 1>, EDITYPE>(class Eigen::PlainObjectBase<class Eigen::Matrix<int, -1, 3, EROW, -1, 3> > const &, class Eigen::PlainObjectBase<class Eigen::Matrix<int, -1, 2, EROW, -1, 2> > &, class Eigen::PlainObjectBase<class Eigen::Matrix<int, -1, 2, EROW, -1, 2> > &, class Eigen::PlainObjectBase<class Eigen::Matrix<int, -1, 1, 0, -1, 1> > &, class std::vector<class std::vector<EDITYPE, class std::allocator<EDITYPE> >, class std::allocator<class std::vector<EDITYPE, class std::allocator<EDITYPE> > > > &);
template void  igl::unique_edge_map<class Eigen::Matrix<int,-1,-1, EROW,-1,-1>,class Eigen::Matrix<int,-1,2, EROW,-1,2>,class Eigen::Matrix<int,-1,2, EROW,-1,2>,class Eigen::Matrix<EDITYPE,-1,1,0,-1,1>, EDITYPE>(class Eigen::PlainObjectBase<class Eigen::Matrix<int,-1,-1, EROW,-1,-1> > const &,class Eigen::PlainObjectBase<class Eigen::Matrix<int,-1,2, EROW,-1,2> > &,class Eigen::PlainObjectBase<class Eigen::Matrix<int,-1,2,EROW,-1,2> > &,class Eigen::PlainObjectBase<class Eigen::Matrix<EDITYPE,-1,1,0,-1,1> > &,class std::vector<class std::vector<EDITYPE,class std::allocator<EDITYPE> >,class std::allocator<class std::vector<EDITYPE,class std::allocator<EDITYPE> > > > &);
#endif

#endif 
