#pragma region Math Agregators  (single value)
template<class TSum>
TSum sum() const
{
    if (size() == 2)
    {
        return data()[0] + data()[1];
    }
    else if (size() == 3)
    {
        return data()[0] + data()[1] + data()[2];
    }
    else if (size() == 4)
    {
        return data()[0] + data()[1] + data()[2] + data()[3];
    }
    else
    {
        TSum res = 0;
        for (Index i = 0; i < size(); i++) res += data()[i];
        return res;
    }
}
T sum() const
{
    if (size() == 2)
    {
        return data()[0] + data()[1];
    }
    else if (size() == 3)
    {
        return data()[0] + data()[1] + data()[2];
    }
    else if (size() == 4)
    {
        return data()[0] + data()[1] + data()[2] + data()[3];
    }
    else
    {
        T res = 0;
        for (Index i = 0; i < size(); i++) res += data()[i];
        return res;
    }
}
T minCoeff() const
{
    T res = T();
    if (size() > 0) res = data()[0];
    for (Index i = 1; i < size(); i++) if (data()[i] < res) res = data()[i];
    return res;
}
T maxCoeff() const
{
    T res = T();
    if (size() > 0) res = data()[0];
    for (Index i = 1; i < size(); i++) if (data()[i] > res) res = data()[i];
    return res;
}
void minCoeff(Index& index) const
{
    index = 0;
    T res = T();
    if (size() > 0) res = data()[0];
    for (Index i = 1; i < size(); i++) if (data()[i] < res)
    {
        res = data()[i];
        index = i;
    }
}
void maxCoeff(Index& index) const
{
    index = 0;
    T res = T();
    if (size() > 0) res = data()[0];
    for (Index i = 1; i < size(); i++) if (data()[i] > res)
    {
        res = data()[i];
        index = i;
    }
}
#pragma endregion 